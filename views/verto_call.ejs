<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>SignalWire Browser SDK Example</title>
    <!-- Cross Browser WebRTC Adapter -->
    <script type="text/javascript" src="https://webrtc.github.io/adapter/adapter-latest.js"></script>
    <!-- Include the SignalWire Relay JS SDK -->
    <script type="text/javascript" src="https://unpkg.com/@signalwire/js@^1"></script>
    <!-- To style up the demo a little -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="shortcut icon" href="https://signalwire.com/assets/images/favicon.ico" />
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');
        body {
            font-family: 'Roboto', sans-serif;
        }
        #dtmfKeys {
            display: none
        }
        .row {
            display: flex;
            justify-content: space-between;
        }
        .col-6 {
            flex: 1;
            margin-right: 10px;
        }
        .col-6:last-child {
            margin-right: 0;
        }
    </style>
</head>
<!-- Main Content -->
<body class="bg-light">
<div class="container">
    <div class="row pt-5">
        <div class="col-12 pb-3">
            <h1>SignalWire Relay Call Test Harness</h1>
            <p>
                This harness allows you to make calls to other browsers, SIP Endpoints or Phone Numbers from your SignalWire project in your browser.
                <br />
                Visit <a href="https://docs.signalwire.com/topics/relay-sdk-js">Relay SDK for JavaScript Documentation</a> for more information and documentation.
            </p>
        </div>
    </div>
    <hr />
    <div class="row py-3">
        <div class="col-12 col-md-4">
            <div class="card">
                <div class="card-body">
                    <h5>Connect</h5>
                    <div class="form-group">
                        <label for="project">Project</label>
                        <input type="text" class="form-control" id="project" placeholder="Enter Project ID">
                        <small id="projectHelp" class="form-text text-muted">Enter the Project ID found on your SignalWire Project Dashboard.</small>
                    </div>
                    <div class="form-group">
                        <label for="token">Token</label>
                        <input type="text" class="form-control" id="token" placeholder="Enter your JWT">
                        <small id="tokenHelp" class="form-text text-muted">Use the generator below to generate a JWT. For more information, visit <a href="https://docs.signalwire.com/reference/relay-sdk-js/v1/#relay-sdk-for-javascript">Using the JavaScript SDK Documentation</a></small>
                    </div>
                </div>
            </div>
            <div class="card">
                <div class="card-body">
                    <h5>Extras</h5>
                    <div>
                        <label class="form-label">Codecs</label>
                        <select id="codecs" class="form-select" multiple size="6"></select>
                        <form id="verto_resource" method="post">
                            <label for="formGroupExampleInput" class="form-label">Verto Resource</label>
                            <input type="text" class="form-control" id="verto_resource_box" name="verto_resource_box" autocomplete="off" placeholder="Resource name">
                            <div class="form-check form-switch mt-3">
                                <input class="form-check-input" type="checkbox" id="verto_duration_switch">
                                <label class="form-check-label" for="verto_duration_switch">Adjust the JWT's duration?</label>
                            </div>
                            <div class="input-group mt-3">
                                <input type="text" class="form-control hidden" id="jwt_duration-box" name="jwt_duration" autocomplete="off" placeholder="Enter JWT duration in minutes">
                            </div>
                            <div class="form-check form-switch mt-3">
                                <input class="form-check-input" type="checkbox" id="eu_sw">
                                <label class="form-check-label" for="eu_sw">Force EU Infrastructure?</label>
                            </div>
                            <div class="form-check form-switch mt-3">
                                <input class="form-check-input" type="checkbox" id="token_switch">
                                <label class="form-check-label" for="token_switch">Disable token refreshing?</label>
                            </div>
                            <div class="row mt-3">
                                <div class="col-6">
                                    <small>Status: <span id='connectStatus'>Not Connected</span></small>
                                    <input class="btn btn-success w-100" type="submit" value="Connect" id="btnConnect">
                                    <button id="btnDisconnect" class="btn btn-danger w-100 d-none" onclick="disconnect()">Disconnect</button>
                                </div>
                            </div>
                        </form>
                    </div>
                    <small id="tokenHelp" class="form-text text-muted">Enter a project ID above and resource name. Once ready, press connect to begin placing calls.</small>
                </div>
            </div>
            <div class="card">
                <div class="card-body">
                    <h5>Call State</h5>
                    <small>Status: <span id='callStatus'>None</span></small>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-8 mt-4 mt-md-1">
            <div class="row">
                <div class="col-6">
                    <h5>Local Video</h5>
                    <video id="localVideo" autoplay="autoplay" class="w-100" style="background-color: #000; border: 1px solid #ccc; border-radius: 5px;"></video>
                </div>
                <div class="col-6">
                    <h5>Remote Video</h5>
                    <video id="remoteVideo" autoplay="autoplay" class="w-100" playsinline style="background-color: #000; border: 1px solid #ccc; border-radius: 5px;"></video>
                </div>
            </div>
            <div class="form-group">
                <label for="number">Call To:</label>
                <input type="text" class="form-control" id="number" placeholder="Enter Resource or Number to Dial">
                <label for="numberFrom">Call From:</label>
                <input type="text" class="form-control" id="numberFrom" placeholder="Enter Source number to Call From">
            </div>
            <input type="hidden" id="jwt_refresh" name="jwt_refresh" value="">
            <div>Call Options:</div>
            <div class="form-check">
                <input type="checkbox" id="audio" value="1">
                <label class="form-check-label" for="audio">
                    Include Audio
                </label>
            </div>
            <div class="form-check">
                <input type="checkbox" id="video" value="1">
                <label class="form-check-label" for="video">
                    Include Video
                </label>
            </div>
            <div class="form-check">
                <input type="checkbox" id="stun" value="1" onchange="stun_swap()">
                <label class="form-check-label" for="STUN">
                    Enable STUN/TURN
                </label>
            </div>
            <button id="startCall" class="btn btn-primary px-5 mt-4" onClick="makeCall()" disabled="disabled">Call</button>
            <button id="hangupCall" class="btn btn-danger px-5 mt-4 d-none" onClick="hangup()" disabled="disabled">Hang up</button>
            <div class="form-group" id="dtmfKeys">
                <button id="dtmf_1" class="btn btn-primary px-2 mt-4" onClick="dtmf()">1</button>
                <button id="dtmf_2" class="btn btn-primary px-2 mt-4" onClick="dtmf()">2</button>
                <button id="dtmf_3" class="btn btn-primary px-2 mt-4" onClick="dtmf()">3</button>
                <button id="dtmf_4" class="btn btn-primary px-2 mt-4" onClick="dtmf()">4</button>
                <button id="dtmf_5" class="btn btn-primary px-2 mt-4" onClick="dtmf()">5</button>
                <button id="dtmf_6" class="btn btn-primary px-2 mt-4" onClick="dtmf()">6</button>
                <button id="dtmf_7" class="btn btn-primary px-2 mt-4" onClick="dtmf()">7</button>
                <button id="dtmf_8" class="btn btn-primary px-2 mt-4" onClick="dtmf()">8</button>
                <button id="dtmf_9" class="btn btn-primary px-2 mt-4" onClick="dtmf()">9</button>
                <button id="dtmf_0" class="btn btn-primary px-2 mt-4" onClick="dtmf()">0</button>
                <button id="dtmf_hash" class="btn btn-primary px-2 mt-4" onClick="dtmf()">#</button>
                <button id="dtmf_star" class="btn btn-primary px-2 mt-4" onClick="dtmf()">*</button>
                <button id="dtmf_a" class="btn btn-primary px-2 mt-4" onClick="dtmf()">A</button>
                <button id="dtmf_b" class="btn btn-primary px-2 mt-4" onClick="dtmf()">B</button>
                <button id="dtmf_c" class="btn btn-primary px-2 mt-4" onClick="dtmf()">C</button>
                <button id="dtmf_d" class="btn btn-primary px-2 mt-4" onClick="dtmf()">D</button>
            </div>
        </div>
    </div>
    <hr />
    <div class="row pt-3 pb-5">
        <div class="col-12">
            <h4>Troubleshooting</h4>
            <p>If you notice any JavaScript errors in the console relating to <code>localStorage</code>, try unblocking 3rd Party Cookies. Some browsers mark localStorage Cookies as 3rd Party when being run from <code>file://</code>.</p>
        </div>
    </div>
</div>
</body>
<script type="text/javascript">
    let client;
    let currentCall = null;

    ready(function() {
        listAvailableCodecs();
        patchRTCPeerCodecs();
    });

    function getWantedCodecs() {
        const el = document.getElementById('codecs')
        const codecs = Array.from(el.selectedOptions).map(({ value }) => value)
        return {
            audio: codecs,
            video: ['video/VP8'],
        }
    }

    function listAvailableCodecs() {
        const { codecs: availSend } = RTCRtpSender.getCapabilities('audio');
        console.log('Codecs', availSend);
        availSend.forEach(row => {
            const option = document.createElement('option');
            option.value = row.mimeType;
            option.text = row.mimeType;
            option.selected = true;
            document.getElementById('codecs').appendChild(option);
        });
    }

    function patchRTCPeerCodecs() {

        const mediaTypes = ['audio', 'video']

        const _createOffer = RTCPeerConnection.prototype.createOffer;
        const _createAnswer = RTCPeerConnection.prototype.createAnswer;

        function patch() {
            const wantedCodecs = getWantedCodecs()

            mediaTypes.forEach(media => {
                const transceiver = this.getTransceivers().find(t => {
                    if (t.sender.track) {
                        return t.sender.track.kind === media
                    } else {
                        return false
                    }

                })
                if (transceiver) {
                    const { codecs: availSend } = RTCRtpSender.getCapabilities(media);
                    const { codecs: availRecv } = RTCRtpReceiver.getCapabilities(media);
                    const newCodecs = []
                    availSend.forEach(row => {
                        if (wantedCodecs[media].includes(row.mimeType)) {
                            newCodecs.push(row)
                        }
                    })
                    availRecv.forEach(row => {
                        if (wantedCodecs[media].includes(row.mimeType)) {
                            newCodecs.push(row)
                        }
                    })
                    console.log('availSend', availSend)
                    console.log('availRecv', availRecv)
                    console.log('Applying the following codec(s)', JSON.stringify(newCodecs), 'for', media)
                    transceiver.setCodecPreferences(newCodecs)
                } else {
                    console.warn('No transceiver found for ', media)
                }
            })
        }


        RTCPeerConnection.prototype.createOffer = function(options) {
            try {
                console.log('This offer', this)
                patch.apply(this)
            } catch (error) {
                console.error('Error patching offer', error)
            }

            return _createOffer.apply(this, options);
        }

        RTCPeerConnection.prototype.createAnswer = function(options) {
            try {
                patch.apply(this)
            } catch (error) {
                console.error('Error patching answer', error)
            }

            return _createAnswer.apply(this, options);
        };
    }

    let project = localStorage.getItem('relay.example.project') || '';
    let token = localStorage.getItem('relay.example.token') || '';
    let number = localStorage.getItem('relay.example.number') || '';
    let numberFrom = localStorage.getItem('relay.example.numberFrom') || '';
    let audio = localStorage.getItem('relay.example.audio') || '1';
    let video = localStorage.getItem('relay.example.video') || '1';
    let stun = localStorage.getItem('relay.example.stun') || '1';
    let host = localStorage.getItem('relay.example.host') || '0';


    // Handles all the events for each input field.
    let inputFields = document.querySelectorAll('.card-body .form-control');
    inputFields.forEach(function(inputField) {
        inputField.addEventListener('change', function(event) {
            saveInLocalStorage(event);
        });
    });
    // Same as the above, just for the checkboxes.
    let checkboxes = document.querySelectorAll('.form-check input');
    checkboxes.forEach(function(checkbox) {
        checkbox.addEventListener('change', function(event) {
            saveInLocalStorage(event);
        });
    });



    const getCircularReplacer = () => {
        const seen = new WeakSet();
        return (key, value) => {
            if (typeof value === "object" && value !== null) {
                if (seen.has(value)) {
                    return;
                }
                seen.add(value);
            }
            return value;
        };
    };


    /**
     * On document ready autofill the input values from the localStorage.
     */
    ready(function() {
        document.getElementById('project').value = project;
        document.getElementById('token').value = token;
        document.getElementById('number').value = number;
        document.getElementById('numberFrom').value = numberFrom;
        document.getElementById('audio').checked = audio === '1';
        document.getElementById('video').checked = video === '1';
        document.getElementById('stun').checked = stun === '1';
        document.getElementById('eu_sw').checked = host !== '0';

    });

    /**
     * Connect with Relay creating a client and attaching all the event handler.
     */
    function connect() {
        if (document.getElementById("eu_sw").checked) {
            client = new Relay({
                project: document.getElementById('project').value,
                token: document.getElementById('token').value,
                host: "eu.relay.signalwire.com"
            });
            console.log("Connected to EU SignalWire.");
        } else {
            client = new Relay({
                project: document.getElementById('project').value,
                token: document.getElementById('token').value
            });
            console.log("Connected to default SignalWire.");
        }

        // client.autoRecoverCalls = false;
        client.remoteElement = 'remoteVideo';
        client.localElement = 'localVideo';
        if (document.getElementById('stun').checked) {
            client.iceServers = [{ urls: ['stun:stun.signalwire.com'] }];
            console.log("STUN is enabled")
        } else {
            client.iceServers = false;
            console.log("STUN is disabled")
        }
        if (document.getElementById('audio').checked) {
            client.enableMicrophone()
        } else {
            client.disableMicrophone()
        }
        if (document.getElementById('video').checked) {
            client.enableWebcam()
        } else {
            client.disableWebcam()
        }

        client.on('signalwire.ready', function() {
            btnConnect.classList.add('d-none');
            btnConnect.disabled = true; // Disable the connect button

            btnDisconnect.classList.remove('d-none');
            btnDisconnect.disabled = false; // Enable the disconnect button

            connectStatus.innerHTML = 'Connected';

            startCall.disabled = false;
        });

        // Update UI on socket close
        client.on('signalwire.socket.close', function() {
            btnConnect.classList.remove('d-none');
            btnConnect.disabled = false; // Enable the connect button

            btnDisconnect.classList.add('d-none');
            btnDisconnect.disabled = true; // Disable the disconnect button

            connectStatus.innerHTML = 'Disconnected';
        });

        // Handle error...
        client.on('signalwire.error', function(error){
            console.error("SignalWire error:", error);
        });

        client.on('signalwire.notification', handleNotification);

        connectStatus.innerHTML = 'Connecting...';
        client.connect();
    }

    function disconnect() {
        connectStatus.innerHTML = 'Disconnecting...';
        client.disconnect();
    }

    /**
     * Handle notification from the client.
     */
    function handleNotification(notification) {
        console.log("notification", notification.type, notification);
        switch (notification.type) {
            case 'callUpdate':
                handleCallUpdate(notification.call);
                break;
            case 'userMediaError':
                // Permission denied or invalid audio/video params on `getUserMedia`
                break;
            case 'refreshToken':
                // Check if the checkbox is checked
                if (!document.getElementById('token_switch').checked) {
                    // Take a new token from your server...
                    refresh_token()
                        .then(async (jwt_token) => {
                            await client.refreshToken(jwt_token).catch(console.error);
                        })
                        .catch(error => {
                            console.error('Failed to refresh token:', error);
                        });
                }
                break;
        }
    }

    /**
     * Update the UI when the call's state change
     */
    function handleCallUpdate(call) {
        currentCall = call;
        let callState = JSON.parse(JSON.stringify(call,getCircularReplacer()));
        console.log(currentCall.state,currentCall.cause,currentCall.causeCode);
        console.log("Call State: " ,callState);
        let msg =  currentCall.causeCode ? `Code:${currentCall.causeCode} Reason: ${currentCall.cause}` : `Early Media:${currentCall.gotEarly} Answered: ${currentCall.gotAnswer}`;
        callStatus.innerHTML = `${currentCall.prevState} -> ${currentCall.state} </br> ${msg}`;

        switch (call.state) {
            case 'new': // Set up the UI
                break;
            case 'trying': // Call is being placed and about to ring.
                startCall.classList.add('d-none');
                hangupCall.classList.remove('d-none');
                hangupCall.disabled = false;
                break;
            case 'recovering': // Call is recovering from a previous session
                if (confirm('Recover the previous call?')) {
                    currentCall.answer();
                    console.log(currentCall.id)
                } else {
                    currentCall.hangup();
                }
                break;
            case 'ringing': // Someone is calling you
                if (confirm('Pick up the call?')) {
                    currentCall.answer();
                } else {
                    currentCall.hangup();
                }
                break;
            case 'active': // Call has become active
                startCall.classList.add('d-none');
                hangupCall.classList.remove('d-none');
                hangupCall.disabled = false;
                dtmfKeys.hidden=false;
                break;
            case 'hangup': // Call is over
                startCall.classList.remove('d-none');
                hangupCall.classList.add('d-none');
                hangupCall.disabled = true;
                dtmfKeys.hidden=true;
                break;
            case 'destroy': // Call has been destroyed
                currentCall = null;
                break;
        }
    }

    /**
     * Make a new outbound call
     */
    function makeCall() {
        const params = {
            destinationNumber: document.getElementById('number').value, // required!
            callerNumber: document.getElementById('numberFrom').value, // required!
            audio: document.getElementById('audio').checked,
            video: document.getElementById('video').checked ? { aspectRatio: 16/9 } : false,
        };
        dtmf_viewer()
        currentCall = client.newCall(params);
    }

    /**
     * Send a DTMF to currentCall if present
     */
    function dtmf() {
        if (currentCall) {
            let dtmfkey = event.srcElement.id;
            console.log(dtmfkey);
            switch (dtmfkey) {
                case 'dtmf_0':
                    currentCall.dtmf('0');
                    break;
                case 'dtmf_1':
                    currentCall.dtmf('1');
                    break;
                case 'dtmf_2':
                    currentCall.dtmf('2');
                    break;
                case 'dtmf_3':
                    currentCall.dtmf('3');
                    break;
                case 'dtmf_4':
                    currentCall.dtmf('4');
                    break;
                case 'dtmf_5':
                    currentCall.dtmf('5');
                    break;
                case 'dtmf_6':
                    currentCall.dtmf('6');
                    break;
                case 'dtmf_7':
                    currentCall.dtmf('7');
                    break;
                case 'dtmf_8':
                    currentCall.dtmf('8');
                    break;
                case 'dtmf_9':
                    currentCall.dtmf('9');
                    break;
                case 'dtmf_hash':
                    currentCall.dtmf('#');
                    break;
                case 'dtmf_star':
                    currentCall.dtmf('*');
                    break;
                case 'dtmf_a':
                    currentCall.dtmf('a');
                    break;
                case 'dtmf_b':
                    currentCall.dtmf('b');
                    break;
                case 'dtmf_c':
                    currentCall.dtmf('c');
                    break;
                case 'dtmf_d':
                    currentCall.dtmf('d');
                    break;
                default:
                    console.log("unknown dtmf");
            }
        }
    }

    /**
     * Hangup the currentCall if present
     */
    function hangup() {
        if (currentCall) {
            currentCall.hangup()
        }
    }

    function saveInLocalStorage(e) {
        let key = e.target.name || e.target.id
        localStorage.setItem('relay.example.' + key, e.target.value);
    }
    function ready(callback) {
        if (document.readyState !== 'loading') {
            callback();
        } else if (document.addEventListener) {
            document.addEventListener('DOMContentLoaded', callback);
        } else {
            document.attachEvent('onreadystatechange', function() {
                if (document.readyState !== 'loading') {
                    callback();
                }
            });
        }
    }
</script>

<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js" integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
<script>
    // Handles the token refreshing.
    function refresh_token() {
        return new Promise((resolve, reject) => {
            $.ajax({
                url: "/jwt_refresh",
                method: "PUT",
                contentType: "application/json",
                data: JSON.stringify({
                    refresh_token: document.getElementById('jwt_refresh').value,
                    duration: document.getElementById("jwt_duration-box").value
                }),
                success: function(data) {
                    $('#token').val(data.jwt_token);
                    $('#jwt_refresh').val(data.refresh_token);
                    resolve(data.jwt_token);
                },
                error: function(xhr, status, error) {
                    reject(error);
                }
            });
        });
    }

    // Handles switching STUN on/off.
    async function stun_swap() {
        disconnect()
        await new Promise(r => setTimeout(r, 750));
        connect()
    }
    // Handles DTMF. Turns on when a call is made and off when not.
    async function dtmf_viewer() {
        await new Promise(r => setTimeout(r, 750));
        // This fixes the DTMF keys always being hidden. The sleep is to ensure the call is made before checking.
        // It also retains the DTMF keys only displaying once a call is made.
        let x = document.getElementById("dtmfKeys");
        if (currentCall) {
            x.style.display = "block"
        } else {}
    }
    // Connects the client once a verto resource name is submitted.
    $(document).ready(function(){
        $("#verto_resource").on('submit', function(event) {
            event.preventDefault(); // Prevent the form from submitting via the browser
            let formValues= $(this).serialize();

            $.ajax({
                url: "/token_handler",
                method: "POST",
                data: formValues,
                success: function(data) {
                    $('#token').val(data.jwt_token);
                    $('#jwt_refresh').val(data.refresh_token);
                    // Connect after the request is done.
                    connect()
                }
            });
        });
    });
    // Hides the JWT duration box if the user doesn't want to customize it.
    $(document).ready(function() {
        $('#jwt_duration-box').hide();
        $('#verto_duration_switch').change(function() {
            if ($(this).is(':checked')) {
                $('#jwt_duration-box').show();
            } else {
                $('#jwt_duration-box').hide();
                $('#jwt_duration-box').val(""); // Reset the value to empty
            }
        });
    });

</script>
</html>